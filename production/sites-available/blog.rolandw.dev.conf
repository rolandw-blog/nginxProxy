server {
    listen 80;
    listen 443 ssl http2;

    # Import key files
    include /etc/nginx/config/keys.dev.conf;

    # we are going to share files from here
    root /usr/share/nginx/html;

    # We are only looking for index.html
    index index.html;

    # define the server name so nginx knows to route requests for this domain here
    server_name blog.rolandw.dev;

    # Use dockers DNS resolver with a cache of 30s
    resolver 127.0.0.11 valid=30s;

    # normal requests go to the blog
    location / {
        # Enable autoindex to serve files (and catch missing pages)
        autoindex on;

        root /usr/share/nginx/html;
    }

    # auth route
    location /auth {
        set $upstream http://authentication:8080;
        proxy_pass $upstream;
    }

    location /admin {
        # Feel free to enable or disable the next line to turn on or off authentication
        auth_request /auth;

        # Locations matching /admin are appended to the root below.
        #   So a request to "domain.com/admin" will fetch ...html/admin/index.html
        #   Also check with /frontend/package.json to ensure that the "homepage" is set correctly
        #   package.json in the ManagementUI should be domain.com/admin (matching the location block)
        root /usr/share/nginx/html;
        index index.html;
    }

    location ~ ^/api/v1/watch(.*) {
        auth_request /auth;

        set $upstream http://blogwatcher:3001$1?$args;
        proxy_pass $upstream;
    }

    location ~ ^/api/v1/build/(.*) {
        auth_request /auth;

        set $upstream http://blogbuilder:3002$1?$args;
        proxy_pass $upstream;
    }

    # 401 requests will go to @error401 below
    error_page 401 = @error401;

    # If the user is not logged in, redirect them to login URL
    # By using auth_request subrequests we can force the client to take a trip to /auth (which goes to auth.domain.com) to check their session cookie
    #   If they dont have a cookie, then they need to log in and get one for the whole *.domain.com
    #   If they have an invalid cookie they come back 401 and loop around to auth.domain.com again
    #   If they have a good cookie then they will come back 200 and proceed to the restricted resource
    location @error401 {
        return 302 https://login.rolandw.dev/auth/promptlogin?serviceURL=http://$http_host$request_uri;
    }
}
