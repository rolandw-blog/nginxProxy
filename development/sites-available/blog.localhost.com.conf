server {
    listen 80;
    listen 443 ssl http2;

    # Import key files
    include /etc/nginx/config/keys.dev.conf;

    # we are going to share files from here
    root /usr/share/nginx/html;

    # Enable autoindex to serve files (and catch missing pages)
    autoindex on;

    # We are only looking for index.html
    index index.html;

    # define the server name so nginx knows to route requests for this domain here
    server_name blog.localhost.com;

    # Debug response header
    #   $1 is the part of the url thats rewritten in the (.*) part of some location blocks
    add_header X-debug-message "req_uri: $request_uri - upstream: $upstream_addr - uri: $uri - rewrite: $1 - args: $args" always;

    # Use dockers DNS resolver with a cache of 30s
    resolver 127.0.0.11 valid=30s;

    # normal requests go to the blog
    location / {
        # The blog itself is served from ...content/*
        #   If the location is / then the file served will be .../html/content/index.html
        #   If the location is /foo then the file served will be .../html/content/foo/index.html
        root /usr/share/nginx/html/content;
        index index.html;
    }

    # auth route
    location /auth {
        set $upstream http://authentication:8080;
        proxy_pass $upstream;
    }

    location /sockjs-node {
        # This is a web socket connection so we need these following headers
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "Upgrade";
        proxy_set_header Host $host;

        set $upstream http://management:4000;
        proxy_pass $upstream;
    }

    location /admin {
        # Feel free to enable or disable the next line to turn on or off authentication
        # auth_request /auth;

        set $upstream http://management:4000;
        proxy_pass $upstream;
    }

    #  /api/v1/watch/foo => "foo" is now stored in $1
    location ~ ^/api/v1/watch(.*) {
        # Feel free to enable or disable the next line to turn on or off authentication
        # auth_request /auth;

        # We can then use $1 from the location to pass it upstream to the proxy
        set $upstream http://blogwatcher:3001$1?$args;
        proxy_pass $upstream;
    }

    location ~ ^/api/v1/build/(.*) {
        # Feel free to enable or disable the next line to turn on or off authentication
        # auth_request /auth;

        set $upstream http://blogbuilder:3002$1?$args;
        proxy_pass $upstream;
    }

    # 401 requests will go to @error401 below
    error_page 401 = @error401;

    # If the user is not logged in, redirect them to login URL
    # By using auth_request subrequests we can force the client to take a trip to /auth (which goes to auth.domain.com) to check their session cookie
    #   If they dont have a cookie, then they need to log in and get one for the whole *.domain.com
    #   If they have an invalid cookie they come back 401 and loop around to auth.domain.com again
    #   If they have a good cookie then they will come back 200 and proceed to the restricted resource
    location @error401 {
        return 302 https://login.localhost.com/auth/promptlogin?serviceURL=http://$http_host$request_uri;
    }
}
